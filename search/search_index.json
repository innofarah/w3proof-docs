{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to W3Proof An Exploration of exploiting formal proofs as a source of trust on the web \u2192 an exploration of mechanisms for sharing formal proofs in a distributed and trusted manner: an attempt to build a distributed and trusted web of formal proofs . Quoting from W3Proof : \"While the World Wide Web provides universal methods for publishing documents, the only form of trust provided is that of reputation: that is, one might be willing to trust assertions on a web page that are cryptographically signed by trusted agents. The W3Proof project proposes to develop an additional global and permanent source of trust by exploiting formal proof as well as the principles of transparency and reproducibility. Instead of viewing assertions and their proof evidence as existing in libraries of various proof assistants, we envision a highly distributed network of such assertions that a skeptic can recheck if desired. Concepts from distributed computing and cryptography will be central components to W3Proof.\" This project is an 'Exploratory Action' proposed and initiated by Dale Miller at Inria Saclay . An 'Exploratory Action' is a term coined by Inria to refer to projects attempting to explore new research themes relative to Inria's usually addressed themes in computer science and which might extend to other areas of knowledge. For more details on the project's idea, refer to Towards an internet of proof?","title":"Welcome to W3Proof"},{"location":"#welcome-to-w3proof","text":"An Exploration of exploiting formal proofs as a source of trust on the web \u2192 an exploration of mechanisms for sharing formal proofs in a distributed and trusted manner: an attempt to build a distributed and trusted web of formal proofs . Quoting from W3Proof : \"While the World Wide Web provides universal methods for publishing documents, the only form of trust provided is that of reputation: that is, one might be willing to trust assertions on a web page that are cryptographically signed by trusted agents. The W3Proof project proposes to develop an additional global and permanent source of trust by exploiting formal proof as well as the principles of transparency and reproducibility. Instead of viewing assertions and their proof evidence as existing in libraries of various proof assistants, we envision a highly distributed network of such assertions that a skeptic can recheck if desired. Concepts from distributed computing and cryptography will be central components to W3Proof.\" This project is an 'Exploratory Action' proposed and initiated by Dale Miller at Inria Saclay . An 'Exploratory Action' is a term coined by Inria to refer to projects attempting to explore new research themes relative to Inria's usually addressed themes in computer science and which might extend to other areas of knowledge. For more details on the project's idea, refer to Towards an internet of proof?","title":"Welcome to W3Proof"},{"location":"introduction/","text":"Introduction & Components Where to Start? At the higher level, this project attempts to address the notion of providing trust on the web by exploiting formal proofs , in contrast to the usual scene where trust in a statement is provided only through trusting the entity claiming that statement , usually by the public key infrastructure model or by the web of trust model. Trust here could refer to many themes , including for example trust in software components , trust in produced scientific results , and trust within journalism and news platforms . Trust on the web within the context of these themes means that the data to be trusted , whatever that might be, is exchanged through the web, and thus the notion of trust needs to be addressed within the realm of the web. Naturally, before thinking about how to achieve this wide-range goal itself, the needed tools to achieve it need to be investigated thoroughly. As formal proofs are the driving force and the essence of what the source of trust is desired to be, the sharing of formal proofs within the realm of the web needs to be addressed. Basically, we can consider a formal proof to be an asset that is considered an evidence of the validity of some statement. Such an asset is usually produced by theorem provers and proof assistants . To trust a statement on the web means to assert/declare this trust and transmit the corresponding assertion through the web. So, as we are considering formal proofs to be the source of trust, what needs to be transmitted and exchanged as the embodiement of this trust are formal proofs themselves, and thus the assets referring to them. As a result, it makes sense to exploration by experimenting with how these assets can be presented , shared , and distributed through the web, regardless for now, of how different and diverse their forms can be, and what problems will arise from this fact. This diversity is due to the existence of several producers of such assets (theorem provers and proof assistants), which differ in both aspects of their implementation as well as the logical foundations they stand upon, which makes the process of normalizing the form of these assets to exchange them in a distributed and transparent manner non-trivial. But again, this is not the first thing to address, as before worrying about wanting to plant various kinds of trees in a garden, maybe to make it colorful, one first needs to know how to plant a tree in the first place. Hence, we start the W3Proof project by developing a first exploratory tool that is intended to work with one kind of asset producer : w3proof-dispatch \u2192 a first attempt to explore potential possibilities. However, before introducing and illustrating the core idea and functionalities of w3proof-dispatch , let us first present an overview of the main components at the base of this project and the main motivations behind using them. Components Involved Abella: the Proof Assistant To quote Abella's official website : Abella is an interactive theorem prover based on lambda-tree syntax. This means that Abella is well-suited for reasoning about the meta-theory of programming languages and other logical systems which manipulate objects with binding. Alright, what we really need to say about Abella right now is not something related to the above quotation. Of course it is important, but what we need to deal with currently is what does this tool produce as assets for us to use . Basically, producing a proof for a theorem in Abella consists of introducing in a file for example, relevant definitions for the theorem, maybe introducing/proving some other theorems (lemmas) preceding it to be used in its proof, and then writing the proof steps that will help the proof assistant to complete the proof; called a proof script , and the proof steps are usually called proof tactics . For you dear reader, this process might look quite familiar, as it is similar to most other similar software. If it's not, consider the following example : % Definition of natural numbers % Kind nat type. Type z nat. Type s nat -> nat. Define nat : nat -> prop by nat z; nat (s N) := nat N. % Some theorem : the successor of a natural number, % % according to the above definition of natural numbers, % % is also a natural number. % Theorem succ_nat : forall A, nat A -> nat (s A). % the proof steps: % induction on 1. intros. case H1. search. apply IH to H2. search. >> Proof completed. [after execution] This is an example of what is called a theorem file in Abella, with the \".thm\" extension. The above example as displayed is contained in a single file, however, it could exist differently: in two files \"nats.thm\" and \"some_theorems.thm\", one of them Importing the other: % in file \"nats.thm\" % Kind nat type. Type z nat. Type s nat -> nat. Define nat : nat -> prop by nat z; nat (s N) := nat N. % in file \"some_theorems.thm\" % Import \"nats\". Theorem succ_nat : forall A, nat A -> nat (s A). induction on 1. intros. case H1. search. apply IH to H2. search. JSON: Data Formatting Signatures: Trust Bridge IPLD: Content-Addressing IPFS: Our Agency to the Web","title":"Introduction & Components"},{"location":"introduction/#introduction-components","text":"","title":"Introduction &amp; Components"},{"location":"introduction/#where-to-start","text":"At the higher level, this project attempts to address the notion of providing trust on the web by exploiting formal proofs , in contrast to the usual scene where trust in a statement is provided only through trusting the entity claiming that statement , usually by the public key infrastructure model or by the web of trust model. Trust here could refer to many themes , including for example trust in software components , trust in produced scientific results , and trust within journalism and news platforms . Trust on the web within the context of these themes means that the data to be trusted , whatever that might be, is exchanged through the web, and thus the notion of trust needs to be addressed within the realm of the web. Naturally, before thinking about how to achieve this wide-range goal itself, the needed tools to achieve it need to be investigated thoroughly. As formal proofs are the driving force and the essence of what the source of trust is desired to be, the sharing of formal proofs within the realm of the web needs to be addressed. Basically, we can consider a formal proof to be an asset that is considered an evidence of the validity of some statement. Such an asset is usually produced by theorem provers and proof assistants . To trust a statement on the web means to assert/declare this trust and transmit the corresponding assertion through the web. So, as we are considering formal proofs to be the source of trust, what needs to be transmitted and exchanged as the embodiement of this trust are formal proofs themselves, and thus the assets referring to them. As a result, it makes sense to exploration by experimenting with how these assets can be presented , shared , and distributed through the web, regardless for now, of how different and diverse their forms can be, and what problems will arise from this fact. This diversity is due to the existence of several producers of such assets (theorem provers and proof assistants), which differ in both aspects of their implementation as well as the logical foundations they stand upon, which makes the process of normalizing the form of these assets to exchange them in a distributed and transparent manner non-trivial. But again, this is not the first thing to address, as before worrying about wanting to plant various kinds of trees in a garden, maybe to make it colorful, one first needs to know how to plant a tree in the first place. Hence, we start the W3Proof project by developing a first exploratory tool that is intended to work with one kind of asset producer : w3proof-dispatch \u2192 a first attempt to explore potential possibilities. However, before introducing and illustrating the core idea and functionalities of w3proof-dispatch , let us first present an overview of the main components at the base of this project and the main motivations behind using them.","title":"Where to Start?"},{"location":"introduction/#components-involved","text":"","title":"Components Involved"},{"location":"introduction/#abella-the-proof-assistant","text":"To quote Abella's official website : Abella is an interactive theorem prover based on lambda-tree syntax. This means that Abella is well-suited for reasoning about the meta-theory of programming languages and other logical systems which manipulate objects with binding. Alright, what we really need to say about Abella right now is not something related to the above quotation. Of course it is important, but what we need to deal with currently is what does this tool produce as assets for us to use . Basically, producing a proof for a theorem in Abella consists of introducing in a file for example, relevant definitions for the theorem, maybe introducing/proving some other theorems (lemmas) preceding it to be used in its proof, and then writing the proof steps that will help the proof assistant to complete the proof; called a proof script , and the proof steps are usually called proof tactics . For you dear reader, this process might look quite familiar, as it is similar to most other similar software. If it's not, consider the following example : % Definition of natural numbers % Kind nat type. Type z nat. Type s nat -> nat. Define nat : nat -> prop by nat z; nat (s N) := nat N. % Some theorem : the successor of a natural number, % % according to the above definition of natural numbers, % % is also a natural number. % Theorem succ_nat : forall A, nat A -> nat (s A). % the proof steps: % induction on 1. intros. case H1. search. apply IH to H2. search. >> Proof completed. [after execution] This is an example of what is called a theorem file in Abella, with the \".thm\" extension. The above example as displayed is contained in a single file, however, it could exist differently: in two files \"nats.thm\" and \"some_theorems.thm\", one of them Importing the other: % in file \"nats.thm\" % Kind nat type. Type z nat. Type s nat -> nat. Define nat : nat -> prop by nat z; nat (s N) := nat N. % in file \"some_theorems.thm\" % Import \"nats\". Theorem succ_nat : forall A, nat A -> nat (s A). induction on 1. intros. case H1. search. apply IH to H2. search.","title":"Abella: the Proof Assistant"},{"location":"introduction/#json-data-formatting","text":"","title":"JSON: Data Formatting"},{"location":"introduction/#signatures-trust-bridge","text":"","title":"Signatures: Trust Bridge"},{"location":"introduction/#ipld-content-addressing","text":"","title":"IPLD: Content-Addressing"},{"location":"introduction/#ipfs-our-agency-to-the-web","text":"","title":"IPFS: Our Agency to the Web"},{"location":"w3proof-dispatch/","text":"w3proof-dispatch Repository on Github","title":"w3proof-dispatch"},{"location":"w3proof-dispatch/#w3proof-dispatch","text":"Repository on Github","title":"w3proof-dispatch"}]}